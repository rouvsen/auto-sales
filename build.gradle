import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.bmuschko.docker-remote-api' version "$dockerVersion"
}

group = 'com.ingress'

def hash = 'git rev-parse --short HEAD'.execute().text.trim() //tag
version = "$projectVersion.$hash"


java {
	sourceCompatibility = '17'
}

jar {
	enabled true
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	implementation 'org.mapstruct:mapstruct:1.5.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

task dockerFile(type: Dockerfile, dependsOn: assemble) {
	destFile.set(project.file('Dockerfile'))
	from "alpine:$alpineVersion"
	runCommand 'apk add --no-cache openjdk17'
	runCommand 'apk add --no-cache tzdata'
	copyFile "build/libs/${project.name}-${project.version}.jar", '/app/'
	workingDir '/app/'
	entryPoint 'java'
	defaultCommand '-jar', "/app/${project.name}-${project.version}.jar"
}

task dockerBuild(type: DockerBuildImage, dependsOn: dockerFile) {
	inputDir.set(file("$projectDir/."))
	doLast {
		println("creatig image: ingress-auto-app:$dockerRepoUrl/${project.name}:$version")
	}
	images.add("$dockerRepoUrl/${project.name}:$version")
}

task dockerPush(type: DockerPushImage, dependsOn: dockerBuild) {
	images.add("$dockerRepoUrl/${project.name}:$version")

	registryCredentials.setUsername("$dockerHubUsername")
	registryCredentials.setPassword("$dockerHubPassword")
	registryCredentials.setEmail("$dockerHubEmail")
}

task replaceImagesTagOnDockerCompose(dependsOn: dockerPush) {
	def dockerComposeFile = file(rootDir.toString().concat("/docker-compose.yaml"))
	def dockerComposeContent = dockerComposeFile.text
	def newDockerComposeContent = dockerComposeContent.replaceAll(
			/${dockerRepoUrl}\/${project.name}.*/,
			"${dockerRepoUrl}/${project.name}:${project.version}"
	)
	dockerComposeFile.write(newDockerComposeContent)
}

tasks.named('test') {
	useJUnitPlatform()
}
